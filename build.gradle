/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import org.opensearch.gradle.VersionProperties

buildscript {
    ext {
        opensearch_group = "org.opensearch"
        opensearch_version = System.getProperty("opensearch.version", "3.2.0-SNAPSHOT")
        is_snapshot = "true" == System.getProperty("build.snapshot", "true")
        build_version_qualifier = System.getProperty("build.version_qualifier", "")

        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        if (build_version_qualifier) {
            opensearch_build += "-${build_version_qualifier}"
        }
        if (is_snapshot) {
            opensearch_build += "-SNAPSHOT"
        }

        opensearch_java_version = '3.1.0'
        aws_sdk_version = '2.30.18'
        junit_version = '5.13.3' // version catalog is 4.x
        junit_platform_version = '1.13.3' // version catalog brings in earlier
    }

    repositories {
        mavenLocal()
        maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
        maven { url = "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:7.0.4"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'checkstyle'
    apply plugin: 'opensearch.java-agent'

    repositories {
        mavenLocal()
        maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
        maven { url = "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://artifacts.opensearch.org/releases/" }
    }

    group = opensearch_group
    version = opensearch_build

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    java {
        targetCompatibility = JavaVersion.VERSION_21
        sourceCompatibility = JavaVersion.VERSION_21
        withSourcesJar()
        withJavadocJar()
    }
    project.getExtensions().getExtraProperties().set("versions", VersionProperties.getVersions())

    checkstyle {
        toolVersion = "latest.release"
    }

    // Fix for CVE-2025-27820 and WS-2019-0379
    configurations.checkstyle {
        exclude group: 'org.apache.httpcomponents.client5', module: 'httpclient5'
        exclude group: 'org.apache.httpcomponents.core5', module: 'httpcore5'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    }
}

subprojects {
    apply plugin: 'java-library'

    dependencies {
        // Common dependencies for all subprojects
        implementation "org.opensearch:opensearch:${opensearch_version}"
        implementation "org.apache.logging.log4j:log4j-api:${versions.log4j}"
        implementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"

        implementation("com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}")
        implementation("com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}")
        implementation "com.fasterxml.jackson.core:jackson-core:${versions.jackson_databind}"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson_databind}"

        implementation "org.apache.httpcomponents.client5:httpclient5:${versions.httpclient5}"
        implementation "org.apache.httpcomponents.core5:httpcore5:${versions.httpcore5}"

        // prevent conflicts with upstream JUnit 4
        testImplementation("org.opensearch.test:framework:${opensearch_version}") {
            exclude group: "org.junit.platform"
        }
        testImplementation("org.junit.jupiter:junit-jupiter:${junit_version}")
        testImplementation("org.junit.platform:junit-platform-launcher:${junit_platform_version}")
        testImplementation("org.mockito:mockito-core:${versions.mockito}")
    }

    configurations {
        testImplementation.extendsFrom testFixtures
    }

    test {
        include '**/*Tests.class'
        systemProperty 'tests.security.manager', 'false'
        useJUnitPlatform()
        outputs.upToDateWhen { false }
        testLogging {
            events "failed", "skipped"
            showExceptions = true
            showCauses = true
            showStackTraces = true
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
        }
    }
    tasks.named("check").configure { dependsOn(jacocoTestReport) }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    // checkstyle gives us the warnings we need, suppress overzelous jdk checks
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                // These are for unpublished test classes
                suppressPomMetadataWarningsFor('testFixturesApiElements')
                suppressPomMetadataWarningsFor('testFixturesRuntimeElements')

                // Customize artifact ID for core project
                if (project.name == 'opensearch-remote-metadata-sdk-core') {
                    artifactId = 'opensearch-remote-metadata-sdk'
                }

                pom {
                    name = project.name == 'opensearch-remote-metadata-sdk-core'
                        ? "OpenSearch Remote Metadata SDK for Java"
                        : "OpenSearch Remote Metadata SDK for Java - ${project.name}"
                    packaging = "jar"
                    description = project.name == 'opensearch-remote-metadata-sdk-core'
                        ? "OpenSearch Remote Metadata SDK for Java"
                        : "OpenSearch Remote Metadata SDK for Java - ${project.name}"
                    url = "https://github.com/opensearch-project/opensearch-remote-metadata-sdk"
                    scm {
                        connection = "scm:git@github.com:opensearch-project/opensearch-remote-metadata-sdk.git"
                        developerConnection = "scm:git@github.com:opensearch-project/opensearch-remote-metadata-sdk.git"
                        url = "git@github.com:opensearch-project/opensearch-remote-metadata-sdk.git"
                    }
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "amazonwebservices"
                            organization = "Amazon Web Services"
                            organizationUrl = "https://aws.amazon.com"
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = 'staging'
                url = "${rootProject.buildDir}/local-staging-repo"
            }
            maven {
                name = "Snapshots"
                url = "https://central.sonatype.com/repository/maven-snapshots/"
                credentials {
                    username = "$System.env.SONATYPE_USERNAME"
                    password = "$System.env.SONATYPE_PASSWORD"
                }
            }
        }
    }
}

apply from: rootProject.file('formatter/formatting.gradle')

// Task to update version
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}
